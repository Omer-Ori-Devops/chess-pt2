#!/bin/bash

# Networking requirements
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#install-and-configure-prerequisites
cat <<EOF >/etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
modprobe overlay
modprobe br_netfilter
cat <<EOF >/etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF
sudo sysctl --system

sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo yum install docker -y
sudo yum install containerd -y


# Configure containerd to use the systemd cgroup driver
# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd-systemd
mkdir -p /etc/containerd
containerd config default >/etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
systemctl enable containerd

# Install Kubernetes tools
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl 
EOF

sudo setenforce 0

sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

sudo systemctl enable --now kubelet
sudo timedatectl set-timezone Israel

%{ if node == "master" ~}
#------------------------------------------------------------------------------#
# Master: initialise cluster
#------------------------------------------------------------------------------#
kubeadm init \
  --token "${token}" \
  --token-ttl 15m \
  --apiserver-cert-extra-sans "${master_public_ip}" \
  %{~ if cidr != null ~}
  --pod-network-cidr "${cidr}" \
  %{~ endif ~}
  --node-name master

# Prepare kubeconfig file for downloading
cp /etc/kubernetes/admin.conf /home/ec2-user
chown ec2-user:ec2-user /home/ec2-user/admin.conf
mkdir ~/.kube
cp /home/ec2-user/admin.conf ~/.kube/config
kubectl --kubeconfig /home/ec2-user/admin.conf config set-cluster kubernetes --server "https://${master_public_ip}:6443"
kubectl apply -f https://raw.githubusercontent.com/Omer-Ori-Devops/chess-ops/main/manifests/cni/calico.yaml
kubectl create ns argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml 
curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
rm argocd-linux-amd64
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
argo_default_pass=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath={.data.password} | base64 -d)
argo_port=$(kubectl get svc -n argocd argocd-server -o=jsonpath='{.spec.ports[?(@.port==80)].nodePort}')

argocd login $master_private_ip:$argo_port --username admin --password $argo_default_pass --insecure
argocd account update-password --current-password $argo_default_pass --new-password $argo_pass

kubectl apply -f https://raw.githubusercontent.com/Omer-Ori-Devops/chess-pt2/main/argocd/argo-infra.yaml?token=GHSAT0AAAAAACETQRHHRHD57U6OGY2TKW7WZGAYFMA

%{~ endif ~}

%{~ if node == "worker" ~}
#------------------------------------------------------------------------------#
# Worker: join cluster
#------------------------------------------------------------------------------#
kubeadm join "${master_private_ip}:6443" \
  --token "${token}" \
  --discovery-token-unsafe-skip-ca-verification \
  --node-name worker-${worker_index}
%{~ endif }

%{~ if node == "tool-chess" ~}
#------------------------------------------------------------------------------#
# Worker: join cluster
#------------------------------------------------------------------------------#
kubeadm join "${master_private_ip}:6443" \
  --token "${token}" \
  --discovery-token-unsafe-skip-ca-verification \
  --node-name tool-chess

%{~ endif }

# Indicate completion
touch /home/ec2-user/done
